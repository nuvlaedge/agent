name: "NuvlaEdge Component Build"

on:
  push:
    branches:
      - 'main'
    tags-ignore:
      - '*.*.*'
  pull_request:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-common-lib:
    runs-on: ubuntu-latest
    outputs:
      lock_hash: ${{ steps.build.outputs.hash_lock }}

    steps:
      - name: Fetch nuvlaedge common
        uses: actions/checkout@v3
        with:
          repository: nuvlaedge/nuvlaedge-common

      - name: SetUp python interpreter
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      #----------------------------------------------
      #        load pip cache if cache exists
      #----------------------------------------------
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Build library
        id: build
        run: |
          source .venv/bin/activate
          poetry build --no-interaction --format=wheel
          echo "hash_lock=${{ hashFiles('**/poetry.lock') }}" >> $GITHUB_OUTPUT

      - name: Save artifact
        uses: actions/upload-artifact@v3
        with:
          name: nuvlaedge-common-lib
          path: dist/nuvlaedge_common-*

  tests:
    needs: build-common-lib
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: SetUp python interpreter
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: pip

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: nuvlaedge-common-lib

      - name: Test ls
        run: |
          ls -la
          ls -la dist/

      - name: Run unit tests
        run: |
          source .venv/bin/activate
          pip install -r code/requirements.tests.txt
          pip install dist/nuvlaedge-common*
          echo "import nuvlaedge " > test_my_test.py
          python test_my_test.py
          pytest code/tests --junitxml=test-report.xml -v
          

  build:
    # Run only if UnitTest succeed
    needs: tests
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Multi-arch docker image build prerequired
        run: sudo docker run --privileged linuxkit/binfmt:v0.8

      - name: Build and deploy on architecture
        env:
          DOCKER_USERNAME: ${{ secrets.SIXSQ_DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.SIXSQ_DOCKER_PASSWORD }}
        run: ./container-release.sh

      - name: Get component dependencies
        run: ./get-dependencies-tree.sh

      - name: Keep list of dependencies as an artifact
        uses: actions/upload-artifact@v2
        if: ${{ success() }}
        with:
          name: dependencies
          path: |
            dependencies-tree.png
            dependencies-licenses.txt

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: test-report.xml

  notify:
    if: always()
    name: Post Workflow Status To Slack
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Slack Workflow Notification
        uses: Gamesight/slack-workflow-status@master
        with:
          # Required Input
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.SLACK_WEBHOOK_URL}}
          # Optional Input
          icon_emoji: ':ghost:'
